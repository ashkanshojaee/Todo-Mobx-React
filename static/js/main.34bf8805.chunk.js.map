{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/ClearCompleted.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","remove","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","observable","action","todoStore","lastId","todos","backuptodos","push","toid","forEach","todo","filter","_this","_loop","_i","i","length","TodoEntry","observer","state","value","handlekeyDown","event","keyCode","addTodo","setState","_this2","react_default","a","createElement","onChange","target","onKeyDown","type","className","placeholder","Component","TodoItem","props","possibleConstructorReturn","getPrototypeOf","call","onToggle","toggle","handleDeleting","bind","assertThisInitialized","removeTodo","onClick","checked","TodoItems","map","components_TodoItem","key","ClearCompleted","clear","Clear","TodoFooter","activeTodos","completedTodos","allTodos","selectedAll","selectedActive","selectedComplete","All","Active","Complete","components_ClearCompleted","App","components_TodoEntry","components_TodoItems","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34bf8805.chunk.js","sourcesContent":["import { observable, action } from 'mobx'\r\n\r\nexport default class TodoModel {\r\n    store\r\n    id\r\n    @observable title\r\n    @observable completed\r\n    @observable remove\r\n\r\n    constructor(store, title, completed, id , remove) {\r\n        this.title = title\r\n        this.completed = completed\r\n        this.id = id\r\n        this.store = store\r\n        this.remove= remove\r\n    }\r\n\r\n    @action\r\n    toggle() {\r\n        this.completed = !this.completed\r\n    }\r\n}\r\n","import { observable, action } from 'mobx';\r\nimport TodoModel from './TodoModel'\r\n\r\nclass TodoStore {\r\n\r\n  @observable todos = [];\r\n  lastId = 0;\r\n\r\n  @observable backuptodos = [];\r\n\r\n  @action\r\n  addTodo(title) {\r\n    this.todos = this.backuptodos;\r\n    this.todos.push(new TodoModel(this, title, false, this.lastId++, false));\r\n    this.backuptodos = this.todos;\r\n  }\r\n  @action\r\n  removeTodo(toid) {\r\n    this.backuptodos.remove(this.backuptodos[toid]);\r\n    this.lastId = this.lastId - 1;\r\n    this.backuptodos.forEach(todo => {\r\n      if (todo.id > toid) {\r\n        todo.id = todo.id - 1;\r\n      } else if (todo.id < toid) {\r\n        todo.id = todo.id;\r\n      }\r\n    });\r\n    this.todos = this.backuptodos;\r\n  }\r\n  @action\r\n  All() {\r\n      this.todos = this.backuptodos;\r\n  }\r\n  @action\r\n  Active() {\r\n      this.todos = this.backuptodos.filter(todo => todo.completed === false);\r\n  }\r\n  @action\r\n  Complete() {\r\n      this.todos = this.backuptodos.filter(todo => todo.completed === true);\r\n  }\r\n  @action\r\n  Clear() {\r\n    for (let i = 0; i < this.backuptodos.length; i++) {\r\n      if (this.backuptodos[i].completed === true) {\r\n        this.backuptodos.remove(this.backuptodos[i]);\r\n        this.backuptodos.forEach(todo => {\r\n          if (todo.id > i) {\r\n            todo.id = todo.id - 1;\r\n          } else if (todo.id < i) {\r\n            todo.id = todo.id;\r\n          }});\r\n          this.lastId--;\r\n        i--;\r\n    }}\r\n    this.todos = this.backuptodos;\r\n  }\r\n}\r\n\r\nconst todoStore = new TodoStore();\r\nexport default todoStore;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from '../stores/TodoStore';\r\nimport {observer} from 'mobx-react';\r\n\r\n@observer\r\n\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value:''\r\n    };\r\n    handlekeyDown = event =>{\r\n        if(event.keyCode!==13){\r\n        return;\r\n        }\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value:''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1>Todo 2020</h1>\r\n                \r\n                <input \r\n                value={this.state.value}\r\n                onChange={\r\n                    event=>this.setState({value:event.target.value})\r\n                }\r\n                onKeyDown={\r\n                    event => this.handlekeyDown(event)\r\n                }\r\n                type=\"text\" \r\n                className=\"new-todo\" \r\n                placeholder=\"What needs to be done?\" />\r\n                \r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default TodoEntry\r\n","import React, { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\n\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleDeleting = this.handleDeleting.bind(this);\r\n    }\r\n    handleDeleting() {\r\n        todoStore.removeTodo(this.props.todo.id);\r\n    }\r\n    onToggle = () => {\r\n        this.props.todo.toggle()\r\n    }\r\n    render() {\r\n        const { todo } = this.props;\r\n        return (\r\n            <li className={todo.completed ? \"completed\" : \"\"}>\r\n                <div className=\"view\">\r\n                    <input\r\n                        onClick={this.onToggle}\r\n                        type=\"checkbox\"\r\n                        className=\"toggle\"\r\n                        value=\"on\"\r\n                        checked={todo.completed} />\r\n                    <label>{todo.title}</label>\r\n                    <button className=\"destroy\"\r\n                        onClick={this.handleDeleting} />\r\n\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default TodoItem","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from '../stores/TodoStore';\r\nimport { observer } from 'mobx-react';\r\n\r\nlet i={};\r\n\r\n@observer\r\n\r\nclass TodoItems extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <section className=\"main\">\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        todoStore.todos.map(todo => {\r\n                            return (<TodoItem todo={todo} key={i}/>)\r\n                        })\r\n                    }\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default TodoItems\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\n\r\nclass ClearCompleted extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.clear = this.clear.bind(this);\r\n  }\r\n  clear() {\r\n    todoStore.Clear();\r\n  }\r\n  render() {\r\n    if (todoStore.backuptodos.filter(\r\n      todo => todo.completed === true).length > 0) {\r\n      return (\r\n        <button onClick={this.clear} className=\"clear-completed\">\r\n          Clear completed\r\n        </button>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default ClearCompleted","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport ClearCompleted from \"./ClearCompleted\";\r\n\r\n@observer\r\n\r\nclass TodoFooter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.activeTodos = this.activeTodos.bind(this);\r\n        this.completedTodos = this.completedTodos.bind(this);\r\n        this.allTodos = this.allTodos.bind(this);\r\n\r\n        this.state = {\r\n\r\n            selectedAll: true,\r\n            selectedActive: false,\r\n            selectedComplete: false\r\n        };\r\n    }\r\n    allTodos() {\r\n        this.setState({\r\n            selectedAll: true,\r\n            selectedActive: false,\r\n            selectedComplete: false\r\n        });\r\n        todoStore.All();\r\n    }\r\n    activeTodos() {\r\n        this.setState({\r\n            selectedAll: false,\r\n            selectedActive: true,\r\n            selectedComplete: false\r\n        });\r\n        todoStore.Active();\r\n    }\r\n    completedTodos() {\r\n        this.setState({\r\n            selectedAll: false,\r\n            selectedActive: false,\r\n            selectedComplete: true\r\n        });\r\n        todoStore.Complete();\r\n    }\r\n\r\n    render() {\r\n        if (todoStore.backuptodos.length > 0) {\r\n            return (\r\n                <div className=\"footer\">\r\n                    <button className=\"todo-count\">\r\n                        <span>\r\n                            {todoStore.backuptodos.filter(todo => todo.completed === false).length}\r\n                        </span>{\" \"}items left\r\n                        </button>\r\n                    <ul className=\"filters\">\r\n                        <li onClick={this.allTodos}>\r\n                            <button>\r\n                                <a className={this.state.selectedAll ? \"selected\" : \" \"}>{\" \"}All</a>\r\n                            </button>\r\n                        </li>\r\n                        <li onClick={this.activeTodos}>\r\n                            <button type=\"submit\">\r\n                                <a className={this.state.selectedActive ? \"selected\" : \" \"}>{\" \"}Active</a>\r\n                            </button>\r\n                        </li>\r\n                        <li onClick={this.completedTodos}>\r\n                            <button type=\"submit\">\r\n                                <a className={this.state.selectedComplete ? \"selected\" : \" \"}>{\" \"}Completed</a>\r\n                            </button>\r\n                        </li>\r\n                    </ul>\r\n                    <ClearCompleted />\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexport default TodoFooter;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"./App.css\";\r\nimport todoStore from \"./stores/TodoStore\";\r\nimport TodoEntry from \"./components/TodoEntry\"\r\nimport TodoItems from \"./components/TodoItems\";\r\nimport TodoFooter from \"./components/TodoFooter\"\r\n\r\n@observer\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <div id=\"todoapp\" className=\"todoapp\">\r\n           <TodoEntry/>\r\n            <TodoItems />\r\n            <TodoFooter/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}